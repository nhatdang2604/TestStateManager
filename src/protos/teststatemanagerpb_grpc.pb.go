// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/teststatemanagerpb.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestStateManagementClient is the client API for TestStateManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestStateManagementClient interface {
	GetInprogressTest(ctx context.Context, in *GetInprogressTestRequest, opts ...grpc.CallOption) (*GetInprogressTestResponse, error)
	StartTest(ctx context.Context, in *StartTestRequest, opts ...grpc.CallOption) (*StartTestResponse, error)
	EndTest(ctx context.Context, in *EndTestRequest, opts ...grpc.CallOption) (*EndTestResponse, error)
}

type testStateManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewTestStateManagementClient(cc grpc.ClientConnInterface) TestStateManagementClient {
	return &testStateManagementClient{cc}
}

func (c *testStateManagementClient) GetInprogressTest(ctx context.Context, in *GetInprogressTestRequest, opts ...grpc.CallOption) (*GetInprogressTestResponse, error) {
	out := new(GetInprogressTestResponse)
	err := c.cc.Invoke(ctx, "/teststatemanager.TestStateManagement/GetInprogressTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testStateManagementClient) StartTest(ctx context.Context, in *StartTestRequest, opts ...grpc.CallOption) (*StartTestResponse, error) {
	out := new(StartTestResponse)
	err := c.cc.Invoke(ctx, "/teststatemanager.TestStateManagement/StartTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testStateManagementClient) EndTest(ctx context.Context, in *EndTestRequest, opts ...grpc.CallOption) (*EndTestResponse, error) {
	out := new(EndTestResponse)
	err := c.cc.Invoke(ctx, "/teststatemanager.TestStateManagement/EndTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestStateManagementServer is the server API for TestStateManagement service.
// All implementations must embed UnimplementedTestStateManagementServer
// for forward compatibility
type TestStateManagementServer interface {
	GetInprogressTest(context.Context, *GetInprogressTestRequest) (*GetInprogressTestResponse, error)
	StartTest(context.Context, *StartTestRequest) (*StartTestResponse, error)
	EndTest(context.Context, *EndTestRequest) (*EndTestResponse, error)
	mustEmbedUnimplementedTestStateManagementServer()
}

// UnimplementedTestStateManagementServer must be embedded to have forward compatible implementations.
type UnimplementedTestStateManagementServer struct {
}

func (UnimplementedTestStateManagementServer) GetInprogressTest(context.Context, *GetInprogressTestRequest) (*GetInprogressTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInprogressTest not implemented")
}
func (UnimplementedTestStateManagementServer) StartTest(context.Context, *StartTestRequest) (*StartTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTest not implemented")
}
func (UnimplementedTestStateManagementServer) EndTest(context.Context, *EndTestRequest) (*EndTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndTest not implemented")
}
func (UnimplementedTestStateManagementServer) mustEmbedUnimplementedTestStateManagementServer() {}

// UnsafeTestStateManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestStateManagementServer will
// result in compilation errors.
type UnsafeTestStateManagementServer interface {
	mustEmbedUnimplementedTestStateManagementServer()
}

func RegisterTestStateManagementServer(s grpc.ServiceRegistrar, srv TestStateManagementServer) {
	s.RegisterService(&TestStateManagement_ServiceDesc, srv)
}

func _TestStateManagement_GetInprogressTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInprogressTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestStateManagementServer).GetInprogressTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teststatemanager.TestStateManagement/GetInprogressTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestStateManagementServer).GetInprogressTest(ctx, req.(*GetInprogressTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestStateManagement_StartTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestStateManagementServer).StartTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teststatemanager.TestStateManagement/StartTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestStateManagementServer).StartTest(ctx, req.(*StartTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestStateManagement_EndTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestStateManagementServer).EndTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teststatemanager.TestStateManagement/EndTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestStateManagementServer).EndTest(ctx, req.(*EndTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestStateManagement_ServiceDesc is the grpc.ServiceDesc for TestStateManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestStateManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teststatemanager.TestStateManagement",
	HandlerType: (*TestStateManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInprogressTest",
			Handler:    _TestStateManagement_GetInprogressTest_Handler,
		},
		{
			MethodName: "StartTest",
			Handler:    _TestStateManagement_StartTest_Handler,
		},
		{
			MethodName: "EndTest",
			Handler:    _TestStateManagement_EndTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/teststatemanagerpb.proto",
}
